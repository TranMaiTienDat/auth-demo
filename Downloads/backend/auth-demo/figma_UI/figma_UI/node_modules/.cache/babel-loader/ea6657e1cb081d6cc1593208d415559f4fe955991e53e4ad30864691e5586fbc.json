{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiend\\\\Downloads\\\\backend\\\\auth-demo\\\\figma_UI\\\\figma_UI\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { loginApi, registerApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in when app starts\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(userData));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const res = await loginApi(username, password);\n\n      // Save token and user data to localStorage\n      localStorage.setItem('token', res.token);\n      localStorage.setItem('user', JSON.stringify(res.user));\n      setIsAuthenticated(true);\n      setUser(res.user);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async (username, password, email) => {\n    try {\n      const res = await registerApi(username, password, email);\n\n      // Auto-login after successful registration\n      localStorage.setItem('token', res.token);\n      localStorage.setItem('user', JSON.stringify(res.user));\n      setIsAuthenticated(true);\n      setUser(res.user);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","loginApi","registerApi","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","token","localStorage","getItem","userData","JSON","parse","login","username","password","res","setItem","stringify","error","register","email","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tiend/Downloads/backend/auth-demo/figma_UI/figma_UI/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { loginApi, registerApi } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check if user is already logged in when app starts\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      setIsAuthenticated(true);\r\n      setUser(JSON.parse(userData));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      const res = await loginApi(username, password);\r\n      \r\n      // Save token and user data to localStorage\r\n      localStorage.setItem('token', res.token);\r\n      localStorage.setItem('user', JSON.stringify(res.user));\r\n      \r\n      setIsAuthenticated(true);\r\n      setUser(res.user);\r\n      return true;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (username, password, email) => {\r\n    try {\r\n      const res = await registerApi(username, password, email);\r\n      \r\n      // Auto-login after successful registration\r\n      localStorage.setItem('token', res.token);\r\n      localStorage.setItem('user', JSON.stringify(res.user));\r\n      \r\n      setIsAuthenticated(true);\r\n      setUser(res.user);\r\n      return true;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}